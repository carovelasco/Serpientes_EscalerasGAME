import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.After;
import org.junit.Test;

public class ListaJugadoresTest {
    
    ListaJugadores lista;
    Jugador jugador1;
    Jugador jugador2;
    Jugador jugador3;
    
 @Before
    public void setUp() {
        ListaJugadores.reiniciar();
        lista = ListaJugadores.getListaJugadores();
        jugador1 = new Jugador(1);
        jugador2 = new Jugador(2);
        jugador3 = new Jugador(3);
        
        lista.añadirJugador(jugador1);
        lista.añadirJugador(jugador2);
    }
    
    @After
    public void tearDown() {
       ListaJugadores.reiniciar();
        
    }
    
    @Test
    public void testMAE() {
        ListaJugadores instancia1 = ListaJugadores.getListaJugadores();
        ListaJugadores instancia2 = ListaJugadores.getListaJugadores();
        assertSame( instancia1, instancia2);
    }
    
    @Test
    public void testAñadirJugador() {

        
        lista.añadirJugador(jugador3);
        assertEquals(3, lista.getJugadores().size());
        assertTrue( lista.getJugadores().contains(jugador3));
    }
    
    @Test
    public void testPasarTurno() {
        Jugador primero = lista.getJugadores().get(0);
        Jugador segundo = lista.getJugadores().get(1);

        Jugador turno1 = lista.pasarTurno();
        assertEquals(primero, turno1);
        assertEquals(segundo, lista.getJugadores().get(0));
        assertEquals(primero, lista.getJugadores().get(1));

        Jugador turno2 = lista.pasarTurno();
        assertEquals(segundo, turno2);
        assertEquals(primero, lista.getJugadores().get(0));
    }

    
    @Test
    public void testComprobarGanador() {
        // Sin ganador al inicio
        assertFalse(lista.comprobarGanador());

        // Jugador 1 gana
        jugador1.setIdCasillaPosicion(64);
        lista.pasarTurno(); // Jugador 1 juega
        assertTrue(lista.comprobarGanador());

        // Jugador 2 gana
        jugador1.setIdCasillaPosicion(1);
        jugador2.setIdCasillaPosicion(64);
        lista.pasarTurno(); // Jugador 2 juega
        assertTrue(lista.comprobarGanador());

        // Nadie gana
        jugador2.setIdCasillaPosicion(50);
        lista.pasarTurno(); // Jugador 1
        assertFalse(lista.comprobarGanador());
    }
    
    
    @Test(expected = IndexOutOfBoundsException.class)
    public void testPasarTurnoConListaVacia() {
        ListaJugadores.reiniciar();
        ListaJugadores listaVacia = ListaJugadores.getListaJugadores();
        listaVacia.getJugadores().clear();
        listaVacia.pasarTurno(); // Debe lanzar excepción
    }
    
    
    @Test
    public void testRotacionConMasDeDosJugadores() {
        lista.añadirJugador(jugador3);
        Jugador turno1 = lista.pasarTurno(); // jugador1
        Jugador turno2 = lista.pasarTurno(); // jugador2
        Jugador turno3 = lista.pasarTurno(); // jugador3

        assertEquals(jugador1, turno1);
        assertEquals(jugador2, turno2);
        assertEquals(jugador3, turno3);
    }
    @Test
    public void testJugadorNoExisteEnLista() {
    	Jugador desconocido = new Jugador(9);
        assertFalse(lista.getJugadores().contains(desconocido));
    }
    
    
    

}

