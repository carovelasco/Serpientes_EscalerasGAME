import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;


public class TableroTest {
     Tablero tablero;
     private ByteArrayOutputStream outContent;
     

    @Before
    public void setUp() {
        Tablero.reiniciarParaPruebas(); 
        tablero = Tablero.getTablero();
        outContent=new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent)); 
       

     }
    @After 
    public void tearDown(){
      System.setOut(originalOut);
        Tablero.reiniciarParaPruebas();
        ListaJugadores.reiniciar();
        Dado.reiniciar();
   }
   @Test 
    public void testMAE()
    {
     Tablero unTablero=Tablero.getTablero();
     assertSame(tablero,unTablero);
    }

      
    @Test
    public void testCargarTableroDesdeArchivo() throws Exception {
        // Crear archivo temporal de prueba
        File archivoTemp = File.createTempFile("tablero_test", ".txt");
        try (FileWriter escritor= new FileWriter(archivoTemp)) {
           escritor.write("ESCALERA,4,14\nSERPIENTE,28,15\nAlInicio,11,1/nCASIFIN,60,62");
        }
        
        tablero.cargarTableroDesdeArchivo(testFile.getAbsolutePath());
        
        assertTrue(tablero.buscarCasilla(4) instanceof CasillaEspecial);
        assertTrue(tablero.buscarCasilla(28) instanceof CasillaEspecial);
        assertTrue(tablero.buscarCasilla(11) instanceof CasillaEspecial);
        assertTrue(tablero.buscarCasilla(60) instanceof CasillaCasiFin);
        assertFalse(tablero.buscarCasilla(1) instanceof CasillaEspecial);
        
       archivoTemp.delete();
    }
   
    @Test
    public void testCargarTableroDesdeArchivoInvalido() throws IOException {
        // Crear archivo temporal con dato invalido
        File archivoTemp = File.createTempFile("tablero_test_invalido", ".txt");
        FileWriter escritor = new FileWriter(archivoTemp);
        escritor.write("SERPIENTE, 16, 99\n"); // ID destino fuera de rango
        escritor.write("ESCALERA, 9, 5\n");     // Escalera que baja (inválido)
        escritor.write("TIPOINVALIDO, 10, 20\n"); // Tipo no válido
        escritor.close();
        
        tablero.cargarTableroDesdeArchivo(archivoTemp.getName());
        
        CasillaMadre casilla = tablero.buscarCasilla(4);
        assertTrue(casilla instanceof CasillaEspecial); // Check one of the default special casillas
        
        tempFile.delete();
    }

   @Test
    public void testCargarTableroDesdeArchivoValido() throws IOException {
        // Create a temporary valid file
    	 File tempFile = File.createTempFile("tableroTest", ".txt");
         FileWriter writer = new FileWriter(tempFile);
         writer.write("ESCALERA,5,10\n");
         writer.write("SERPIENTE,15,5\n");
         writer.write("ALINICIO,20,1\n");
         writer.write("CASIFIN,60,62\n");
         writer.close();
         
         tablero.cargarTableroDesdeArchivo(tempFile.getAbsolutePath());
         
         // Verify the squares were set correctly
         CasillaMadre casilla = tablero.buscarCasilla(5);
         assertTrue(casilla instanceof CasillaEspecial);
         assertEquals(10, ((CasillaEspecial)casilla).getIdCasillaDestino());
         
         casilla = tablero.buscarCasilla(15);
         assertTrue(casilla instanceof CasillaEspecial);
         assertEquals(5, ((CasillaEspecial)casilla).getIdCasillaDestino());
         
         tempFile.delete();
     }


    @Test
    public void testCargarTableroDesdeArchivoInvalido() throws IOException {
    	  // Create a temporary test file with invalid data
        File tempFile = File.createTempFile("tableroTestInvalid", ".txt");
        FileWriter writer = new FileWriter(tempFile);
        writer.write("ESCALERA,5,10\n");
        writer.write("INVALID_TYPE,15,5\n");  // Invalid type
        writer.write("SERPIENTE,70,5\n");    // Invalid ID (out of range)
        writer.close();
        
        tablero.cargarTableroDesdeArchivo(tempFile.getAbsolutePath());
        
        // The method should fall back to creating a basic board
        // Verify by checking one of the default special squares
        CasillaMadre casilla = tablero.buscarCasilla(4);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(14, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        tempFile.delete();
    }
    
    @Test
    public void testCargarTableroDesdeArchivoInexistente() {
        tablero.cargarTableroDesdeArchivo("archivo_que_no_existe.txt");
        
        // Should fall back to creating a basic board
        CasillaMadre casilla = tablero.buscarCasilla(4);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(14, ((CasillaEspecial)casilla).getIdCasillaDestino());
    }

 

   @Test
    public void testCrearTableroBasico() {
        tablero.crearTableroBasico();
        // Verify that some default special tiles exist
        assertTrue(tablero.buscarCasilla(4) instanceof CasillaEspecial);  // Escalera
        assertTrue(tablero.buscarCasilla(16) instanceof CasillaEspecial); // Serpiente
        assertTrue(tablero.buscarCasilla(9) instanceof CasillaEspecial);  // Escalera
        assertTrue(tablero.buscarCasilla(47) instanceof CasillaEspecial); // Serpiente
        assertTrue(tablero.buscarCasilla(51) instanceof CasillaEspecial); // AlInicio
        assertTrue(tablero.buscarCasilla(22) instanceof CasillaEspecial); // Escalera
        assertTrue(tablero.buscarCasilla(27) instanceof CasillaCasiFin); //CasiFin
        assertTrue(tablero.buscarCasilla(61) instanceof CasillaEspecial); // Serpiente
        CasillaMadre casilla = tablero.buscarCasilla(4);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(14, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
      
        
        casilla = tablero.buscarCasilla(16);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(6, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(47);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(26, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(49);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(11, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(61);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(19, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(4);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(14, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(9);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(39, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(22);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(44, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(36);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(41, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(51);
        assertTrue(casilla instanceof CasillaEspecial);
        assertEquals(1, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(27);
        assertTrue(casilla instanceof CasillaCasiFin);
        assertEquals(62, ((CasillaEspecial)casilla).getIdCasillaDestino());
        
        casilla = tablero.buscarCasilla(2);
        assertFalse(casilla instanceof CasillaEspecial);
        
    }

   @Test
    public void testObtenerCoordenadas() {
        tablero.crearTableroBasico();
    
        Coordenadas coords = tablero.obtenerCoordenadas(64);
        assertEquals(0, coords.getFila());
        assertEquals(0, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(63);
        assertEquals(0, coords.getFila());
        assertEquals(1, coords.getColumna());

        coords = tablero.obtenerCoordenadas(62);
        assertEquals(0, coords.getFila());
        assertEquals(2, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(61);
        assertEquals(0, coords.getFila());
        assertEquals(3, coords.getColumna());

        coords = tablero.obtenerCoordenadas(60);
        assertEquals(0, coords.getFila());
        assertEquals(4, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(59);
        assertEquals(0, coords.getFila());
        assertEquals(5, coords.getColumna());

        coords = tablero.obtenerCoordenadas(58);
        assertEquals(0, coords.getFila());
        assertEquals(6, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(57);
        assertEquals(0, coords.getFila());
        assertEquals(7, coords.getColumna());

        coords = tablero.obtenerCoordenadas(56);
        assertEquals(1, coords.getFila());
        assertEquals(7, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(55);
        assertEquals(1, coords.getFila());
        assertEquals(6, coords.getColumna());

        coords = tablero.obtenerCoordenadas(54);
        assertEquals(1, coords.getFila());
        assertEquals(5, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(53);
        assertEquals(1, coords.getFila());
        assertEquals(4, coords.getColumna());

        coords = tablero.obtenerCoordenadas(52);
        assertEquals(1, coords.getFila());
        assertEquals(3, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(51);
        assertEquals(1, coords.getFila());
        assertEquals(2, coords.getColumna());

        coords = tablero.obtenerCoordenadas(50);
        assertEquals(1, coords.getFila());
        assertEquals(1, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(49);
        assertEquals(1, coords.getFila());
        assertEquals(0, coords.getColumna());

        coords = tablero.obtenerCoordenadas(48);
        assertEquals(2, coords.getFila());
        assertEquals(0, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(47);
        assertEquals(2, coords.getFila());
        assertEquals(1, coords.getColumna());

        coords = tablero.obtenerCoordenadas(46);
        assertEquals(2, coords.getFila());
        assertEquals(2, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(45);
        assertEquals(2, coords.getFila());
        assertEquals(3, coords.getColumna());

        coords = tablero.obtenerCoordenadas(44);
        assertEquals(2, coords.getFila());
        assertEquals(4, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(43);
        assertEquals(2, coords.getFila());
        assertEquals(5, coords.getColumna());

        coords = tablero.obtenerCoordenadas(42);
        assertEquals(2, coords.getFila());
        assertEquals(6, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(41);
        assertEquals(2, coords.getFila());
        assertEquals(7, coords.getColumna());

        coords = tablero.obtenerCoordenadas(40);
        assertEquals(3, coords.getFila());
        assertEquals(7, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(39);
        assertEquals(3, coords.getFila());
        assertEquals(6, coords.getColumna());

        coords = tablero.obtenerCoordenadas(38);
        assertEquals(3, coords.getFila());
        assertEquals(5, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(37);
        assertEquals(3, coords.getFila());
        assertEquals(4, coords.getColumna());

        coords = tablero.obtenerCoordenadas(36);
        assertEquals(3, coords.getFila());
        assertEquals(3, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(35);
        assertEquals(3, coords.getFila());
        assertEquals(2, coords.getColumna());

        coords = tablero.obtenerCoordenadas(34);
        assertEquals(3, coords.getFila());
        assertEquals(1, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(33);
        assertEquals(3, coords.getFila());
        assertEquals(0, coords.getColumna());

        coords = tablero.obtenerCoordenadas(32);
        assertEquals(4, coords.getFila());
        assertEquals(0, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(31);
        assertEquals(4, coords.getFila());
        assertEquals(1, coords.getColumna());

        coords = tablero.obtenerCoordenadas(30);
        assertEquals(4, coords.getFila());
        assertEquals(2, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(29);
        assertEquals(4, coords.getFila());
        assertEquals(3, coords.getColumna());

        coords = tablero.obtenerCoordenadas(28);
        assertEquals(4, coords.getFila());
        assertEquals(4, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(27);
        assertEquals(4, coords.getFila());
        assertEquals(5, coords.getColumna());

        coords = tablero.obtenerCoordenadas(26);
        assertEquals(4, coords.getFila());
        assertEquals(6, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(25);
        assertEquals(4, coords.getFila());
        assertEquals(7, coords.getColumna());

        coords = tablero.obtenerCoordenadas(24);
        assertEquals(5, coords.getFila());
        assertEquals(7, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(23);
        assertEquals(5, coords.getFila());
        assertEquals(6, coords.getColumna());

        coords = tablero.obtenerCoordenadas(22);
        assertEquals(5, coords.getFila());
        assertEquals(5, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(21);
        assertEquals(5, coords.getFila());
        assertEquals(4, coords.getColumna());

        coords = tablero.obtenerCoordenadas(20);
        assertEquals(5, coords.getFila());
        assertEquals(3, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(19);
        assertEquals(5, coords.getFila());
        assertEquals(2, coords.getColumna());

        coords = tablero.obtenerCoordenadas(18);
        assertEquals(5, coords.getFila());
        assertEquals(1, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(17);
        assertEquals(5, coords.getFila());
        assertEquals(0, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(16);
        assertEquals(6, coords.getFila());
        assertEquals(0, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(15);
        assertEquals(6, coords.getFila());
        assertEquals(1, coords.getColumna());

        coords = tablero.obtenerCoordenadas(14);
        assertEquals(6, coords.getFila());
        assertEquals(2, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(13);
        assertEquals(6, coords.getFila());
        assertEquals(3, coords.getColumna());

        coords = tablero.obtenerCoordenadas(12);
        assertEquals(6, coords.getFila());
        assertEquals(4, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(11);
        assertEquals(6, coords.getFila());
        assertEquals(5, coords.getColumna());

        coords = tablero.obtenerCoordenadas(10);
        assertEquals(6, coords.getFila());
        assertEquals(6, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(9);
        assertEquals(6, coords.getFila());
        assertEquals(7, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(8);
        assertEquals(7, coords.getFila());
        assertEquals(7, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(7);
        assertEquals(7, coords.getFila());
        assertEquals(6, coords.getColumna());

        coords = tablero.obtenerCoordenadas(6);
        assertEquals(7, coords.getFila());
        assertEquals(5, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(5);
        assertEquals(7, coords.getFila());
        assertEquals(4, coords.getColumna());

        coords = tablero.obtenerCoordenadas(4);
        assertEquals(7, coords.getFila());
        assertEquals(3, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(3);
        assertEquals(7, coords.getFila());
        assertEquals(2, coords.getColumna());

        coords = tablero.obtenerCoordenadas(2);
        assertEquals(7, coords.getFila());
        assertEquals(1, coords.getColumna());
        
        coords = tablero.obtenerCoordenadas(1);
        assertEquals(7, coords.getFila());
        assertEquals(0, coords.getColumna());
        
    }

    @Test
    public void testBuscarCasilla() {
        tablero.crearTableroBasico();

        CasillaMadre casilla = tablero.buscarCasilla(4);
        assertNotNull(casilla);
        assertEquals(4, casilla.getIdCasilla());

        casilla = tablero.buscarCasilla(64);
        assertNotNull(casilla);
        assertEquals(64, casilla.getIdCasilla());
        
        casilla = tablero.buscarCasilla(0);  // Invalid ID
        assertNull(casilla);

        casilla = tablero.buscarCasilla(99);  // Invalid ID
        assertNull(casilla);
    }


    @Test
public void testImprimirTablero() {
    tablero.crearTableroBasico();
    tablero.imprimirTablero();
    
    String output = outContent.toString();
    assertTrue(output.contains("+------+")); 
    assertTrue(output.contains("64"));    
    assertTrue(output.contains("1"));       
    assertTrue(output.contains("4"));      
    assertTrue(output.contains("16"));       
}
}
