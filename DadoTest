
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DadoTest {

    @BeforeEach
    public void setUp() {
        Dado.reiniciar();
    }

    @AfterEach
    public void tearDown() {
       Dado.reiniciar();
    }

    @Test
    public void testSingletonPattern() {
        Dado dado1 = Dado.getDado();
        Dado dado2 = Dado.getDado();
        assertSame(dado1, dado2, "Debería ser la misma instancia");
    }

    @Test
    public void testLanzarDadoFixedValue() {
        Dado dado = Dado.getDado();
        
        
        for (int i = 1; i <= 6; i++) {
            dado.setValorFijado(i);
            assertEquals(i, dado.lanzarDado());
        }
    }

    @Test
    public void testLanzarDado() {
        Dado dado = Dado.getDado();
        dado.resetToRandom();
        
        // Test multiple random rolls 
        for (int i = 0; i < 1000; i++) {
            int result = dado.lanzarDado();
            assertTrue(result >= 1 && result <= 6, "El valor debe estar entre 1 y 6");
        }
    }

    @Test
    public void testSetValorFijado() {
        Dado dado = Dado.getDado();
        
        assertThrows(IllegalArgumentException.class, () -> {
            dado.setFixedValue(0);
        });
        
        assertThrows(IllegalArgumentException.class, () -> {
            dado.setFixedValue(7);
        });
    }

    @Test
    public void testResetToRandom() {
        Dado dado = Dado.getDado();
        dado.setFixedValue(3);
        assertEquals(3, dado.lanzarDado());
        
        dado.resetToRandom();
        // After reset, should return random values
        boolean encontradoValorDiferente = false;
        for (int i = 0; i < 12; i++) {
            if (dado.lanzarDado() != 3) {
                encontradoValorDiferente= true;
                break;
            }
        }
        assertTrue(encontradoValorDiferente, "Debería generar valores aleatorios después de reset");
    }
}
