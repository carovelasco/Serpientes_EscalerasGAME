import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.After;
import org.junit.Test;

public class DadoTest {
	Dado dado;


@Before
    public void setUp() {
        Dado.reiniciar();
    }

    @After
    public void tearDown() {
       Dado.reiniciar();
    }

    @Test
    public void testSingletonPattern() {
        Dado dado1 = Dado.getDado();
        Dado dado2 = Dado.getDado();
        assertSame(dado1, dado2);
    }

    @Test
    public void testLanzarDadoFixedValue() {
        Dado dado = Dado.getDado();
        for (int i = 1; i <= 6; i++) {
            dado.setValorDado(i);
            assertEquals(i, dado.lanzarDado());
        }
    }

    @Test
    public void testLanzarDado() {
        Dado dado = Dado.getDado();
        dado.resetToRandom();
        
        // Test multiple random rolls 
        for (int i = 0; i < 1000; i++) {
            int result = dado.lanzarDado();
            assertTrue(result >= 1 && result <= 6);
        }
    }

    @Test
    public void testSetValordado() {
        Dado dado = Dado.getDado();
        
        assertThrows(IllegalArgumentException.class, () -> {
            dado.setValorDado(0);
        });
        assertThrows(IllegalArgumentException.class, () -> {
            dado.setValorDado(7);
        });
    }

    @Test
    public void testResetToRandom() {
        Dado dado = Dado.getDado();
        dado.setValorDado(3);
        assertEquals(3, dado.lanzarDado());
        
        dado.resetToRandom();
        // After reset, should return random values
        boolean encontradoValorDiferente = false;
        for (int i = 0; i < 12; i++) {
            if (dado.lanzarDado() != 3) {
                encontradoValorDiferente= true;
                break;
            }
        }
        assertTrue(encontradoValorDiferente);
    }
}
